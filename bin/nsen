#!/usr/bin/php
<?php

// before any application gets loaded lets pull a list of defined
// classes to pretend that all of those will have php manual entries.

$GLOBALS['SenseiPreloadData'] = [
	'Classes'    => get_declared_classes(),
	'Interfaces' => get_declared_interfaces(),
	'Traits'     => get_declared_traits()
];

require('vendor/autoload.php');

use Nether\Console\Meta\Command;
use Nether\Console\Meta\Info;
use Nether\Console\Meta\Arg;
use Nether\Console\Meta\Toggle;
use Nether\Console\Meta\Value;
use Nether\Console\Meta\Error;

class App
extends Nether\Console\Client {

	#[Nether\Console\Meta\Command]
	public function
	HandleRun():
	int {

		$this->HandleCompile();
		$this->HandleRender();

		return 0;
	}

	#[Nether\Console\Meta\Command]
	#[Nether\Console\Meta\Arg('path')]
	#[Nether\Console\Meta\Error(1, 'No path specified.')]
	public function
	HandleCompile():
	int {

		$Path = $this->GetInput(2) ?? NULL;
		$Outfile = $this->GetOption('out') ?? 'sensei-data.phson';

		if(!$Path)
		$this->Quit(1);

		////////

		$Codebase = new Nether\Sensei\Codebase;

		foreach(new Nether\Sensei\Indexers\FileIndexer($Path) as $File) {
			$Code = Nether\Sensei\Indexers\CodeIndexer::FromFile($File);
			$Codebase->BakeClasses($Code->Classes);
		}

		$Codebase->BakeNamespaces();

		//print_r($Codebase->Classes->Keys());
		//print_r($Codebase->Namespaces->Keys());

		file_put_contents(
			$Outfile,
			serialize($Codebase)
		);

		return 0;
	}

	#[Nether\Console\Meta\Command]
	#[Nether\Console\Meta\Error(1, 'no input file found')]
	public function
	HandleRender():
	int {

		$Root = dirname(__FILE__,2);
		$Infile = ($this->GetOption('in') ?? "{$Root}/sensei-data.phson");
		$Outdir = ($this->GetOption('out') ?? "{$Root}/docs");

		if(!file_exists($Infile))
		$this->Quit(1);

		static::Messages(
			"Input: {$Infile}",
			"Output: {$Outdir}"
		);

		try {
			$Codebase = unserialize(file_get_contents($Infile));
			$Codebase->Render($Outdir);
		}

		catch(Throwable $Err) {
			throw $Err;
			echo $Err->GetMessage(), PHP_EOL;
			return 1;
		}

		return 0;
	}

};

exit((new App)->Run());
